// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PhoenixAPI3.Data;

#nullable disable

namespace PhoenixAPI3.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230412190056_CreateEntites")]
    partial class CreateEntites
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PhoenixAPI3.Data.Models.AppUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AppUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FreeSession")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("PhoenixAPI3.Data.Models.Appointment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("PhoenixAPI3.Data.Models.Burn", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BurnedId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BurnedId");

                    b.ToTable("Burns");
                });

            modelBuilder.Entity("PhoenixAPI3.Data.Models.ChatBox", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("FirstId")
                        .HasColumnType("bigint");

                    b.Property<long>("SecondId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FirstId");

                    b.HasIndex("SecondId");

                    b.ToTable("ChatBoxs");
                });

            modelBuilder.Entity("PhoenixAPI3.Data.Models.ChatBoxDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ChatBoxId")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FeedActionType")
                        .HasColumnType("int");

                    b.Property<long>("SenderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ChatBoxId");

                    b.HasIndex("SenderId");

                    b.ToTable("ChatBoxDetails");
                });

            modelBuilder.Entity("PhoenixAPI3.Data.Models.Feed", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Feeds");
                });

            modelBuilder.Entity("PhoenixAPI3.Data.Models.FeedAction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("FeedActionType")
                        .HasColumnType("int");

                    b.Property<long>("FeedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("FeedId");

                    b.ToTable("FeedActions");
                });

            modelBuilder.Entity("PhoenixAPI3.Data.Models.FeedComment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FeedActionType")
                        .HasColumnType("int");

                    b.Property<long>("FeedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FeedId");

                    b.ToTable("FeedComments");
                });

            modelBuilder.Entity("PhoenixAPI3.Data.Models.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ReceivedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("SendedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceivedBy");

                    b.HasIndex("SendedBy");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("PhoenixAPI3.Data.Models.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RateCount")
                        .HasColumnType("int");

                    b.Property<long>("ReviewerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ReviewerId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("PhoenixAPI3.Data.Models.AppUser", b =>
                {
                    b.HasOne("PhoenixAPI3.Data.Models.AppUser", null)
                        .WithMany("Followers")
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("PhoenixAPI3.Data.Models.Appointment", b =>
                {
                    b.HasOne("PhoenixAPI3.Data.Models.AppUser", "Doctor")
                        .WithMany("DoctorAppointments")
                        .HasForeignKey("DoctorId")
                        .IsRequired();

                    b.HasOne("PhoenixAPI3.Data.Models.AppUser", "Patient")
                        .WithMany("PatientAppointments")
                        .HasForeignKey("PatientId")
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("PhoenixAPI3.Data.Models.Burn", b =>
                {
                    b.HasOne("PhoenixAPI3.Data.Models.AppUser", "Burned")
                        .WithMany()
                        .HasForeignKey("BurnedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Burned");
                });

            modelBuilder.Entity("PhoenixAPI3.Data.Models.ChatBox", b =>
                {
                    b.HasOne("PhoenixAPI3.Data.Models.AppUser", "First")
                        .WithMany("FirstInChatBox")
                        .HasForeignKey("FirstId")
                        .IsRequired();

                    b.HasOne("PhoenixAPI3.Data.Models.AppUser", "Second")
                        .WithMany("SecondInChatBox")
                        .HasForeignKey("SecondId")
                        .IsRequired();

                    b.Navigation("First");

                    b.Navigation("Second");
                });

            modelBuilder.Entity("PhoenixAPI3.Data.Models.ChatBoxDetails", b =>
                {
                    b.HasOne("PhoenixAPI3.Data.Models.ChatBox", "ChatBox")
                        .WithMany("Details")
                        .HasForeignKey("ChatBoxId")
                        .IsRequired();

                    b.HasOne("PhoenixAPI3.Data.Models.AppUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatBox");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("PhoenixAPI3.Data.Models.Feed", b =>
                {
                    b.HasOne("PhoenixAPI3.Data.Models.AppUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");
                });

            modelBuilder.Entity("PhoenixAPI3.Data.Models.FeedAction", b =>
                {
                    b.HasOne("PhoenixAPI3.Data.Models.AppUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhoenixAPI3.Data.Models.Feed", "Feed")
                        .WithMany("Actions")
                        .HasForeignKey("FeedId")
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("Feed");
                });

            modelBuilder.Entity("PhoenixAPI3.Data.Models.FeedComment", b =>
                {
                    b.HasOne("PhoenixAPI3.Data.Models.AppUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhoenixAPI3.Data.Models.Feed", "Feed")
                        .WithMany("Comments")
                        .HasForeignKey("FeedId")
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("Feed");
                });

            modelBuilder.Entity("PhoenixAPI3.Data.Models.Notification", b =>
                {
                    b.HasOne("PhoenixAPI3.Data.Models.AppUser", "ReceivedUser")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("ReceivedBy")
                        .IsRequired();

                    b.HasOne("PhoenixAPI3.Data.Models.AppUser", "SendedUser")
                        .WithMany("SendNotifications")
                        .HasForeignKey("SendedBy")
                        .IsRequired();

                    b.Navigation("ReceivedUser");

                    b.Navigation("SendedUser");
                });

            modelBuilder.Entity("PhoenixAPI3.Data.Models.Review", b =>
                {
                    b.HasOne("PhoenixAPI3.Data.Models.AppUser", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("PhoenixAPI3.Data.Models.AppUser", b =>
                {
                    b.Navigation("DoctorAppointments");

                    b.Navigation("FirstInChatBox");

                    b.Navigation("Followers");

                    b.Navigation("PatientAppointments");

                    b.Navigation("ReceivedNotifications");

                    b.Navigation("SecondInChatBox");

                    b.Navigation("SendNotifications");
                });

            modelBuilder.Entity("PhoenixAPI3.Data.Models.ChatBox", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("PhoenixAPI3.Data.Models.Feed", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
